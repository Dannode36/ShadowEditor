#include <vector>
#include <string>

struct Vector2 {
    float x;
    float y;
};
struct Tile {
    float x;
    float y;
    float z;
};
struct Colour {
    float r;
    float g;
    float b;
    float a;
};

struct Block {
    std::string name;
    int blockID;
    float averageDensity;
    float averageLandValue;
};
struct MyClass3 {
    int ethnicity;
    int frequency;
};
struct District {
    std::string name;
    std::string preset;
    int districtID;
    std::vector<Block> blocks;
    float averageLandValue;
    std::vector<MyClass3> dominantEthnicities;
};

struct MyClass6 {
    Vector2 fc;
    Vector2 ltc;
    Tile nc;
    std::vector<void*> w;
    int fh;
    int ft;
    float nwm;
    bool io;
    bool ia;
    bool ib;
    bool ios;
    bool ic;
    bool sll;
    bool sul;
    std::string fr;
    std::string frr;
    bool anf;
    bool wt;
    bool cav;
    bool fav;
};

struct LightZone {
    std::vector<Tile> n;
    Colour areaLightColour;
    float areaLightBright;
};
struct Material {
    int instanceID;
};
struct MaterialKey {
    Material baseMaterial;
    Colour mainColour;
    Colour colour1;
    Colour colour2;
    Colour colour3;
    float grubiness;
};
struct Object {
    int id;
    std::vector<std::string> furnitureClasses;
    int angle;
    Tile anchorNode;
    std::vector<Tile> coversNodes;
    Tile offset;
    std::string furniture;
    std::string art;
    bool useFOVBLock;
    Vector2 fovDirection;
    int fovMaxDistance;
    bool up;
    Tile scale;
    MaterialKey matKey;
    MaterialKey artMatKet;
    std::vector<void*> owners;
};
struct MyClass12 {
    std::string cluster;
    Tile anchorNode;
    int angle;
    float ranking;
    std::vector<Object> objs;
};
struct MyClass13 {
    std::vector<void*> digits;
    int type;
    int id;
    bool used;
    std::vector<void*> notes;
};
struct MyClass14 {
    int r;
    std::vector<void*> d;
};
struct Room {
    std::string name;
    std::vector<MyClass6> nodes;
    std::vector<void*> openPlanElements;
    std::vector<LightZone> lightZones;
    std::vector<void*> commonRooms;
    int floorID;
    int id;
    int fID;
    int iID;
    std::string preset;
    bool reachableFromEntrance;
    bool isOutsideWindow;
    bool allowCoving;
    std::string floorMaterial;
    MaterialKey floorMatKey;
    std::string ceilingMaterial;
    MaterialKey ceilingMatKey;
    std::string defaultWallMaterial;
    MaterialKey defaultWallKey;
    MaterialKey miscKey;
    std::string colourScheme;
    std::string mainLightPreset;
    bool isBaseNullRoom;
    Tile middle;
    std::vector<MyClass12> f;
    std::vector<void*> owners;
    std::vector<void*> airVents;
    MyClass13 password;
    int cf;
    std::vector<MyClass14> cullTree;
    std::vector<void*> above;
    std::vector<void*> below;
    std::vector<void*> adj;
    std::vector<void*> occ;
};
struct StreetTile {
    std::string name;
    Tile worldPos;
    int section;
    int angle;
};
struct Street {
    std::string name;
    int residenceNumber;
    bool isLobby;
    bool isMainLobby;
    bool isOutside;
    int access;
    std::vector<Room> rooms;
    std::string designStyle;
    int streetID;
    int district;
    std::vector<Tile> tiles;
    std::string streetSuffix;
    bool isAlley;
    bool isBackstreet;
    std::vector<void*> sharedGround;
    std::vector<StreetTile> streetTiles;
};
struct Building {
    int buildingID;
    std::string name;
    std::vector<void*> floors;
    std::string preset;
    int facing;
    bool isInaccessible;
    std::vector<void*> sideSigns;
    std::vector<void*> airDucts;
    std::string designStyle;
    Colour wood;
    std::string floorMaterial;
    MaterialKey floorMatKey;
    std::string ceilingMaterial;
    MaterialKey ceilingMatKey;
    std::string defaultWallMaterial;
    MaterialKey defaultWallKey;
    std::string extWallMaterial;
    MaterialKey extWallKey;
    std::string colourScheme;
    std::string floorMatOverride;
    std::string ceilingMatOverride;
    std::string wallMatOverride;
    std::string floorMatOverrideB;
    std::string ceilingMatOverrideB;
    std::string wallMatOverrideB;
};
struct MyClass19 {
    int tileID;
    Vector2 floorCoord;
    Tile globalTileCoord;
    bool isOutside;
    bool isObstacle;
    bool isAlley;
    bool isBackstreet;
    bool isEdge;
    int rotation;
    bool isEntrance;
    bool isMainEntrance;
    bool isStairwell;
    int stairwellRotation;
    bool isElevator;
    int elevatorRotation;
    bool isTop;
    bool isBottom;
    bool useOptimizedFloor;
    bool useOptimizedCeiling;
};
struct MyClass20 {
    std::string name;
    int blockID;
    int districtID;
    Vector2 cityCoord;
    Building building;
    std::vector<MyClass19> outsideTiles;
    int density;
    int landValue;
};
struct MyClass21 {
    int group;
    Colour skinColourRange1;
    Colour skinColourRange2;
    int blackHairRatio;
    int brownHairRatio;
    int blondeHairRatio;
    int gingerHairRatio;
    int RedHairRatio;
    int blueHairRatio;
    int greenHairRatio;
    int purpleHairRatio;
    int pinkHairRatio;
    int greyHairRatio;
    int whiteHairRatio;
    int baldHairRatioMale;
    int shortHairRatioMale;
    int longHairRatioMale;
    int baldHairRatioFemale;
    int shortHairRatioFemale;
    int longHairRatioFemale;
    int straightHairRatioMale;
    int curlyHairRatioMale;
    int balingHairRatioMale;
    int messyHairRatioMale;
    int styledHairRatioMale;
    int mohawkHairRatioMale;
    int afroHairRatioMale;
    int straightHairRatioFemale;
    int curlyHairRatioFemale;
    int balingHairRatioFemale;
    int messyHairRatioFemale;
    int styledHairRatioFemale;
    int mohawkHairRatioFemale;
    int afroHairRatioFemale;
    int blueEyesRatio;
    int brownEyesRatio;
    int greenEyesRatio;
    int greyEyesRatio;
    bool overrideFirst;
    int overrideNameFirst;
    bool overrideSur;
    int overrideNameSur;
    std::vector<int> culturalSimilarities;
    std::vector<Material> ethTraits;
};
struct MyClass22 {
    int group;
    float ratio;
    MyClass21 stats;
};
struct MyClass23 {
    int feature;
    int id;
};
struct MyClass24 {
    float visualDistinctiveness;
    int build;
    int height;
    float heightCM;
    float weightKG;
    int shoeSize;
    int footwear;
    std::vector<MyClass22> ethnicities;
    Colour skinColour;
    int hairColourCategory;
    Colour hairColour;
    int hairType;
    int eyeColour;
    std::vector<MyClass23> facialFeatures;
};
struct MyClass25 {
    int from;
    int with;
    std::vector<int> connections;
    int secret;
    float compatible;
    float known;
    float like;
    std::vector<void*> dataKeys;
};
struct MyClass26 {
    int traitID;
    std::string trait;
    int reason;
    std::string date;
};
struct MyClass27 {
    std::vector<int> digits;
    int type;
    int id;
    bool used;
    std::vector<int> notes;
};
struct MyClass28 {
    std::string clothes;
    std::vector<void*> tags;
    Colour baseColor;
    Colour color1;
    Colour color2;
    Colour color3;
    bool borrowed;
};
struct MyClass29 {
    int category;
    std::vector<MyClass28> clothes;
};
struct MyClass30 {
    int humanID;
    int home;
    std::string debugHome;
    float speedModifier;
    int job;
    std::string birthday;
    float societalClass;
    MyClass24 descriptors;
    int blood;
    std::string citizenName;
    std::string firstName;
    std::string casualName;
    std::string surName;
    bool homeless;
    float slangUsage;
    float genderScale;
    int gender;
    int bGender;
    float sexuality;
    float homosexuality;
    std::vector<int> attractedTo;
    int partner;
    int paramour;
    std::string anniversary;
    float sleepNeedMultiplier;
    float snoring;
    float snoreDelay;
    float humility;
    float emotionality;
    float extraversion;
    float agreeableness;
    float conscientiousness;
    float creativity;
    std::vector<MyClass25> acquaintances;
    std::vector<MyClass26> traits;
    MyClass27 password;
    float maxHealth;
    float recoveryRate;
    float combatSkill;
    float combatHeft;
    float maxNerve;
    float breathRecovery;
    std::string handwriting;
    int sightingMemory;
    std::vector<std::string> favItems;
    std::vector<int> favItemRanks;
    std::vector<int> favCat;
    std::vector<int> favAddresses;
    std::vector<MyClass29> outfits;
    int favCol;
};
struct MyClass31 {
    Colour colour;
    float intensity;
    float flickerColourMultiplier;
    float pulseSpeed;
    float intervalTime;
    bool flicker;
    float range;
};
struct MyClass32 {
    std::string name;
    int id;
    Tile wPos;
    Tile wEuler;
    Tile lPos;
    Tile lEuler;
    Tile spWPos;
    Tile spWEuler;
    Tile spNode;
    bool spR;
    std::string p;
    std::vector<void*> pv;
    int fp;
    int fsoi;
    int dp;
    MaterialKey mk;
    MyClass31 lcd;
    std::string lp;
    std::string bp;
    std::string sdp;
    std::string dds;
    int pt;
    int w;
    int r;
    int b;
    int inv;
    float val;
    bool ins;
    float lma;
    float cs;
    bool wo;
    int opp;
    std::string bo;
    std::string sd;
    bool sw0;
    bool sw1;
    bool sw2;
    bool sw3;
    bool locked;
    bool phy;
    bool drm;
    int lzs;
    bool ml;
    int pto;
    std::vector<void*> ssp;
    float mtr;
    bool cr;
    bool rem;
    bool rPl;
    bool spCh;
    bool force;
    std::vector<void*> df;
    std::vector<void*> print;
    std::vector<void*> cap;
    std::vector<void*> sCap;
    int nEvKey;
    float lhc;
    bool ft;
    MyClass13 passcode;
};
struct MyClass33 {
    std::string preset;
    int id;
    float decimalStartTime;
    std::vector<int> weekDays;
    std::vector<int> members;
    int meetingPlace;
};
struct MyClass34 {
    int w;
    std::vector<int> s;
};
struct MyClass35 {
    int type;
    std::vector<MyClass34> routes;
    std::vector<int> rooms;
};
struct MyClass36 {
    int id;
    std::string preset;
    std::string name;
    bool teamLeader;
    int boss;
    float paygrade;
    int teamID;
    bool isOwner;
    int collar;
    int work;
    std::vector<void*> tags;
    int shift;
    float startTime;
    float endTime;
    std::vector<void*> workDaysList;
    float salary;
    std::string salaryString;
};
struct MyClass37 {
    int page;
    std::string evID;
    int meta;
    std::string discEvID;
    int disc;
    std::string seperation;
    std::string str;
    int order;
};
struct MyClass38 {
    std::string id;
    int page;
    std::vector<MyClass37> mpContent;
};
struct MyClass39 {
    int varType;
    float value;
    std::string str;
};
struct MyClass40 {
    int id;
    std::string preset;
    int owner;
    int writer;
    int reciever;
    std::string dds;
    std::vector<MyClass39> passed;
    Tile n;
    bool cd;
};
struct MyClass41 {
    std::string build;
    std::string cityName;
    std::string seed;
    Vector2 citySize;
    int population;
    int playersApartment;
    std::vector<District> districts;
    std::vector<Street> streets;
    std::vector<MyClass20> cityTiles;
    std::vector<MyClass30> citizens;
    std::vector<MyClass32> interactables;
    std::vector<MyClass33> groups;
    std::vector<MyClass35> pipes;
    std::vector<MyClass36> criminals;
    std::vector<MyClass38> multiPage;
    std::vector<MyClass40> metas;
};
